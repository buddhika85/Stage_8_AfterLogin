//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess_EF.EntityFramework
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BCMY_StockEntities : DbContext
    {
        public BCMY_StockEntities()
            : base("name=BCMY_StockEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TblBusiness> TblBusinesses { get; set; }
        public virtual DbSet<TblContact> TblContacts { get; set; }
        public virtual DbSet<TblNegotiation> TblNegotiations { get; set; }
        public virtual DbSet<TblOrderLine> TblOrderLines { get; set; }
        public virtual DbSet<TblProductStock> TblProductStocks { get; set; }
        public virtual DbSet<TblCurrency> TblCurrencies { get; set; }
        public virtual DbSet<TblExchangeRate> TblExchangeRates { get; set; }
        public virtual DbSet<TblOrder> TblOrders { get; set; }
        public virtual DbSet<TblCustomerSupplier> TblCustomerSuppliers { get; set; }
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
    
        public virtual ObjectResult<string> SP_ConfirmOrder(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_ConfirmOrder", orderIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_CreateOrder(Nullable<int> companyId, string contactFulName, string vat, Nullable<int> currencyId, string type)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var contactFulNameParameter = contactFulName != null ?
                new ObjectParameter("contactFulName", contactFulName) :
                new ObjectParameter("contactFulName", typeof(string));
    
            var vatParameter = vat != null ?
                new ObjectParameter("vat", vat) :
                new ObjectParameter("vat", typeof(string));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("currencyId", currencyId) :
                new ObjectParameter("currencyId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_CreateOrder", companyIdParameter, contactFulNameParameter, vatParameter, currencyIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<SP_GetAllOrderViewModels_Result> SP_GetAllOrderViewModels()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllOrderViewModels_Result>("SP_GetAllOrderViewModels");
        }
    
        public virtual int SP_GetContactInfo(Nullable<int> contactId)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("contactId", contactId) :
                new ObjectParameter("contactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetContactInfo", contactIdParameter);
        }
    
        public virtual ObjectResult<SP_GetContactsByCustomerSupplierId_Result> SP_GetContactsByCustomerSupplierId(Nullable<int> customerSupplierId)
        {
            var customerSupplierIdParameter = customerSupplierId.HasValue ?
                new ObjectParameter("customerSupplierId", customerSupplierId) :
                new ObjectParameter("customerSupplierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetContactsByCustomerSupplierId_Result>("SP_GetContactsByCustomerSupplierId", customerSupplierIdParameter);
        }
    
        public virtual ObjectResult<SP_GetContactsWithCompanyNames_Result> SP_GetContactsWithCompanyNames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetContactsWithCompanyNames_Result>("SP_GetContactsWithCompanyNames");
        }
    
        public virtual ObjectResult<SP_GetCustomerSuppliersByFullName_Result> SP_GetCustomerSuppliersByFullName(string fullName)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("fullName", fullName) :
                new ObjectParameter("fullName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCustomerSuppliersByFullName_Result>("SP_GetCustomerSuppliersByFullName", fullNameParameter);
        }
    
        public virtual ObjectResult<SP_GetNegotiationsByOrderProductIds_Result> SP_GetNegotiationsByOrderProductIds(Nullable<int> orderId, Nullable<int> productListId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            var productListIdParameter = productListId.HasValue ?
                new ObjectParameter("productListId", productListId) :
                new ObjectParameter("productListId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetNegotiationsByOrderProductIds_Result>("SP_GetNegotiationsByOrderProductIds", orderIdParameter, productListIdParameter);
        }
    
        public virtual ObjectResult<SP_GetOrderlineInfoById_Result> SP_GetOrderlineInfoById(Nullable<int> orderlineId, string orderCurrency)
        {
            var orderlineIdParameter = orderlineId.HasValue ?
                new ObjectParameter("orderlineId", orderlineId) :
                new ObjectParameter("orderlineId", typeof(int));
    
            var orderCurrencyParameter = orderCurrency != null ?
                new ObjectParameter("orderCurrency", orderCurrency) :
                new ObjectParameter("orderCurrency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetOrderlineInfoById_Result>("SP_GetOrderlineInfoById", orderlineIdParameter, orderCurrencyParameter);
        }
    
        public virtual ObjectResult<SP_GetOrderLinesByOrderId_Result> SP_GetOrderLinesByOrderId(Nullable<int> orderIdVal)
        {
            var orderIdValParameter = orderIdVal.HasValue ?
                new ObjectParameter("orderIdVal", orderIdVal) :
                new ObjectParameter("orderIdVal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetOrderLinesByOrderId_Result>("SP_GetOrderLinesByOrderId", orderIdValParameter);
        }
    
        public virtual ObjectResult<SP_GetOrderVmById_Result> SP_GetOrderVmById(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetOrderVmById_Result>("SP_GetOrderVmById", orderIdParameter);
        }
    
        public virtual ObjectResult<SP_GetSuccessNegotiationsByProductId_Result> SP_GetSuccessNegotiationsByProductId(Nullable<int> orderId, Nullable<int> productListId, string selectedCurrency)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            var productListIdParameter = productListId.HasValue ?
                new ObjectParameter("productListId", productListId) :
                new ObjectParameter("productListId", typeof(int));
    
            var selectedCurrencyParameter = selectedCurrency != null ?
                new ObjectParameter("selectedCurrency", selectedCurrency) :
                new ObjectParameter("selectedCurrency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSuccessNegotiationsByProductId_Result>("SP_GetSuccessNegotiationsByProductId", orderIdParameter, productListIdParameter, selectedCurrencyParameter);
        }
    
        public virtual int SP_PopulateTblProductStockForTesting()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PopulateTblProductStockForTesting");
        }
    
        public virtual ObjectResult<SP_SaveOrderLineWithNegotiation_Result> SP_SaveOrderLineWithNegotiation(Nullable<int> productListId, Nullable<decimal> quantityVal, Nullable<decimal> pricePerItem, Nullable<decimal> totalAmountVal, string status, Nullable<System.DateTime> dateTime, Nullable<int> orderIdVal)
        {
            var productListIdParameter = productListId.HasValue ?
                new ObjectParameter("productListId", productListId) :
                new ObjectParameter("productListId", typeof(int));
    
            var quantityValParameter = quantityVal.HasValue ?
                new ObjectParameter("quantityVal", quantityVal) :
                new ObjectParameter("quantityVal", typeof(decimal));
    
            var pricePerItemParameter = pricePerItem.HasValue ?
                new ObjectParameter("pricePerItem", pricePerItem) :
                new ObjectParameter("pricePerItem", typeof(decimal));
    
            var totalAmountValParameter = totalAmountVal.HasValue ?
                new ObjectParameter("totalAmountVal", totalAmountVal) :
                new ObjectParameter("totalAmountVal", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("dateTime", dateTime) :
                new ObjectParameter("dateTime", typeof(System.DateTime));
    
            var orderIdValParameter = orderIdVal.HasValue ?
                new ObjectParameter("orderIdVal", orderIdVal) :
                new ObjectParameter("orderIdVal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SaveOrderLineWithNegotiation_Result>("SP_SaveOrderLineWithNegotiation", productListIdParameter, quantityValParameter, pricePerItemParameter, totalAmountValParameter, statusParameter, dateTimeParameter, orderIdValParameter);
        }
    
        public virtual ObjectResult<SP_SearchOrders_Result> SP_SearchOrders(Nullable<int> companyId, string contactFulName, Nullable<int> orderId, string status, string orderType, Nullable<System.DateTime> creationDateFrom, Nullable<System.DateTime> creationDateTo)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var contactFulNameParameter = contactFulName != null ?
                new ObjectParameter("contactFulName", contactFulName) :
                new ObjectParameter("contactFulName", typeof(string));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("orderType", orderType) :
                new ObjectParameter("orderType", typeof(string));
    
            var creationDateFromParameter = creationDateFrom.HasValue ?
                new ObjectParameter("creationDateFrom", creationDateFrom) :
                new ObjectParameter("creationDateFrom", typeof(System.DateTime));
    
            var creationDateToParameter = creationDateTo.HasValue ?
                new ObjectParameter("creationDateTo", creationDateTo) :
                new ObjectParameter("creationDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SearchOrders_Result>("SP_SearchOrders", companyIdParameter, contactFulNameParameter, orderIdParameter, statusParameter, orderTypeParameter, creationDateFromParameter, creationDateToParameter);
        }
    
        public virtual ObjectResult<SP_SearchOrders_Simple_Result> SP_SearchOrders_Simple()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SearchOrders_Simple_Result>("SP_SearchOrders_Simple");
        }
    
        public virtual ObjectResult<SP_GetSuccessNumOfNegotiationsByProductId_Result> SP_GetSuccessNumOfNegotiationsByProductId(Nullable<int> orderId, Nullable<int> productListId, Nullable<int> count)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            var productListIdParameter = productListId.HasValue ?
                new ObjectParameter("productListId", productListId) :
                new ObjectParameter("productListId", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSuccessNumOfNegotiationsByProductId_Result>("SP_GetSuccessNumOfNegotiationsByProductId", orderIdParameter, productListIdParameter, countParameter);
        }
    
        public virtual int SP_InserUpdateExchangeRates(Nullable<decimal> usd, Nullable<decimal> euro, ObjectParameter insertEditStatus)
        {
            var usdParameter = usd.HasValue ?
                new ObjectParameter("usd", usd) :
                new ObjectParameter("usd", typeof(decimal));
    
            var euroParameter = euro.HasValue ?
                new ObjectParameter("euro", euro) :
                new ObjectParameter("euro", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InserUpdateExchangeRates", usdParameter, euroParameter, insertEditStatus);
        }
    
        public virtual ObjectResult<SP_GetAllCurrencies_Result> SP_GetAllCurrencies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllCurrencies_Result>("SP_GetAllCurrencies");
        }
    
        public virtual ObjectResult<SP_GetAllCustomerSuppliers_Result> SP_GetAllCustomerSuppliers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllCustomerSuppliers_Result>("SP_GetAllCustomerSuppliers");
        }
    
        public virtual ObjectResult<SP_GetChartsExchangeRatesDeviation_Result> SP_GetChartsExchangeRatesDeviation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetChartsExchangeRatesDeviation_Result>("SP_GetChartsExchangeRatesDeviation");
        }
    
        public virtual int SP_IncreaseStockCount(Nullable<int> productListId, Nullable<int> incrementAmount)
        {
            var productListIdParameter = productListId.HasValue ?
                new ObjectParameter("productListId", productListId) :
                new ObjectParameter("productListId", typeof(int));
    
            var incrementAmountParameter = incrementAmount.HasValue ?
                new ObjectParameter("incrementAmount", incrementAmount) :
                new ObjectParameter("incrementAmount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_IncreaseStockCount", productListIdParameter, incrementAmountParameter);
        }
    
        public virtual ObjectResult<string> SP_ConfirmOrderLinesWithOrder(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_ConfirmOrderLinesWithOrder", orderIdParameter);
        }
    
        public virtual int SP_ValidateAndSavePastExchangeRates(string dateStr, Nullable<decimal> euroVal, Nullable<decimal> usdVal)
        {
            var dateStrParameter = dateStr != null ?
                new ObjectParameter("dateStr", dateStr) :
                new ObjectParameter("dateStr", typeof(string));
    
            var euroValParameter = euroVal.HasValue ?
                new ObjectParameter("euroVal", euroVal) :
                new ObjectParameter("euroVal", typeof(decimal));
    
            var usdValParameter = usdVal.HasValue ?
                new ObjectParameter("usdVal", usdVal) :
                new ObjectParameter("usdVal", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ValidateAndSavePastExchangeRates", dateStrParameter, euroValParameter, usdValParameter);
        }
    
        public virtual ObjectResult<string> SP_CreatePastSalesOrder(Nullable<int> companyId, string contactFulName, string vat, Nullable<int> currencyId, string type, Nullable<System.DateTime> orderDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var contactFulNameParameter = contactFulName != null ?
                new ObjectParameter("contactFulName", contactFulName) :
                new ObjectParameter("contactFulName", typeof(string));
    
            var vatParameter = vat != null ?
                new ObjectParameter("vat", vat) :
                new ObjectParameter("vat", typeof(string));
    
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("currencyId", currencyId) :
                new ObjectParameter("currencyId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("orderDate", orderDate) :
                new ObjectParameter("orderDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_CreatePastSalesOrder", companyIdParameter, contactFulNameParameter, vatParameter, currencyIdParameter, typeParameter, orderDateParameter);
        }
    
        public virtual int SP_DeleteOrder(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteOrder", orderIdParameter);
        }
    
        public virtual ObjectResult<string> SP_DeleteOrRejectOrderline(string deleteOrReject, Nullable<int> orderlineId, Nullable<int> orderId)
        {
            var deleteOrRejectParameter = deleteOrReject != null ?
                new ObjectParameter("deleteOrReject", deleteOrReject) :
                new ObjectParameter("deleteOrReject", typeof(string));
    
            var orderlineIdParameter = orderlineId.HasValue ?
                new ObjectParameter("orderlineId", orderlineId) :
                new ObjectParameter("orderlineId", typeof(int));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_DeleteOrRejectOrderline", deleteOrRejectParameter, orderlineIdParameter, orderIdParameter);
        }
    
        public virtual ObjectResult<string> SP_DeleteOrRejectPastOrderline(string deleteOrReject, Nullable<int> orderlineId, Nullable<int> orderId)
        {
            var deleteOrRejectParameter = deleteOrReject != null ?
                new ObjectParameter("deleteOrReject", deleteOrReject) :
                new ObjectParameter("deleteOrReject", typeof(string));
    
            var orderlineIdParameter = orderlineId.HasValue ?
                new ObjectParameter("orderlineId", orderlineId) :
                new ObjectParameter("orderlineId", typeof(int));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_DeleteOrRejectPastOrderline", deleteOrRejectParameter, orderlineIdParameter, orderIdParameter);
        }
    
        public virtual ObjectResult<SP_GetNumOfSuccessNegotiationsByProductId_Result> SP_GetNumOfSuccessNegotiationsByProductId(Nullable<int> orderId, Nullable<int> productListId, string selectedCurrency, Nullable<int> numOfNegotiations)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            var productListIdParameter = productListId.HasValue ?
                new ObjectParameter("productListId", productListId) :
                new ObjectParameter("productListId", typeof(int));
    
            var selectedCurrencyParameter = selectedCurrency != null ?
                new ObjectParameter("selectedCurrency", selectedCurrency) :
                new ObjectParameter("selectedCurrency", typeof(string));
    
            var numOfNegotiationsParameter = numOfNegotiations.HasValue ?
                new ObjectParameter("numOfNegotiations", numOfNegotiations) :
                new ObjectParameter("numOfNegotiations", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetNumOfSuccessNegotiationsByProductId_Result>("SP_GetNumOfSuccessNegotiationsByProductId", orderIdParameter, productListIdParameter, selectedCurrencyParameter, numOfNegotiationsParameter);
        }
    
        public virtual ObjectResult<SP_GetProductsWithStockInfo_Result> SP_GetProductsWithStockInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetProductsWithStockInfo_Result>("SP_GetProductsWithStockInfo");
        }
    
        public virtual ObjectResult<SP_SavePastOrderLineWithNegotiation_Result> SP_SavePastOrderLineWithNegotiation(Nullable<int> productListId, Nullable<decimal> quantityVal, Nullable<decimal> pricePerItem, Nullable<decimal> totalAmountVal, string status, Nullable<int> orderIdVal, Nullable<System.DateTime> orderDate)
        {
            var productListIdParameter = productListId.HasValue ?
                new ObjectParameter("productListId", productListId) :
                new ObjectParameter("productListId", typeof(int));
    
            var quantityValParameter = quantityVal.HasValue ?
                new ObjectParameter("quantityVal", quantityVal) :
                new ObjectParameter("quantityVal", typeof(decimal));
    
            var pricePerItemParameter = pricePerItem.HasValue ?
                new ObjectParameter("pricePerItem", pricePerItem) :
                new ObjectParameter("pricePerItem", typeof(decimal));
    
            var totalAmountValParameter = totalAmountVal.HasValue ?
                new ObjectParameter("totalAmountVal", totalAmountVal) :
                new ObjectParameter("totalAmountVal", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var orderIdValParameter = orderIdVal.HasValue ?
                new ObjectParameter("orderIdVal", orderIdVal) :
                new ObjectParameter("orderIdVal", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("orderDate", orderDate) :
                new ObjectParameter("orderDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SavePastOrderLineWithNegotiation_Result>("SP_SavePastOrderLineWithNegotiation", productListIdParameter, quantityValParameter, pricePerItemParameter, totalAmountValParameter, statusParameter, orderIdValParameter, orderDateParameter);
        }
    
        public virtual int SP_SearchAspNetUsers(string username, string userRolesCsv, string firstname, string lastname, string position, Nullable<System.DateTime> employmentDate, Nullable<System.DateTime> registrationDate, Nullable<System.DateTime> lastLoginDateTime, Nullable<System.DateTime> lastInvalidLoginDateTime)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var userRolesCsvParameter = userRolesCsv != null ?
                new ObjectParameter("userRolesCsv", userRolesCsv) :
                new ObjectParameter("userRolesCsv", typeof(string));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(string));
    
            var employmentDateParameter = employmentDate.HasValue ?
                new ObjectParameter("employmentDate", employmentDate) :
                new ObjectParameter("employmentDate", typeof(System.DateTime));
    
            var registrationDateParameter = registrationDate.HasValue ?
                new ObjectParameter("registrationDate", registrationDate) :
                new ObjectParameter("registrationDate", typeof(System.DateTime));
    
            var lastLoginDateTimeParameter = lastLoginDateTime.HasValue ?
                new ObjectParameter("lastLoginDateTime", lastLoginDateTime) :
                new ObjectParameter("lastLoginDateTime", typeof(System.DateTime));
    
            var lastInvalidLoginDateTimeParameter = lastInvalidLoginDateTime.HasValue ?
                new ObjectParameter("lastInvalidLoginDateTime", lastInvalidLoginDateTime) :
                new ObjectParameter("lastInvalidLoginDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SearchAspNetUsers", usernameParameter, userRolesCsvParameter, firstnameParameter, lastnameParameter, positionParameter, employmentDateParameter, registrationDateParameter, lastLoginDateTimeParameter, lastInvalidLoginDateTimeParameter);
        }
    
        public virtual int SP_TransferConfirmedOLinesToNegotisTbl()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_TransferConfirmedOLinesToNegotisTbl");
        }
    
        public virtual ObjectResult<string> SP_UpdateStockCount(Nullable<int> productId, Nullable<int> quantity, string stockCountAmended)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var stockCountAmendedParameter = stockCountAmended != null ?
                new ObjectParameter("stockCountAmended", stockCountAmended) :
                new ObjectParameter("stockCountAmended", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UpdateStockCount", productIdParameter, quantityParameter, stockCountAmendedParameter);
        }
    
        [DbFunction("BCMY_StockEntities", "SplitStringsByDelimiter")]
        public virtual IQueryable<string> SplitStringsByDelimiter(string list, string delimiter)
        {
            var listParameter = list != null ?
                new ObjectParameter("List", list) :
                new ObjectParameter("List", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[BCMY_StockEntities].[SplitStringsByDelimiter](@List, @Delimiter)", listParameter, delimiterParameter);
        }
    }
}
